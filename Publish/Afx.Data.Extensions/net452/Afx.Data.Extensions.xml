<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Afx.Data.Extensions</name>
    </assembly>
    <members>
        <member name="T:Afx.Data.DatabaseExtension">
            <summary>
            数据库访问扩展方法
            </summary>
        </member>
        <member name="M:Afx.Data.DatabaseExtension.Query``1(Afx.Data.IDatabase,System.String,System.Object)">
            <summary>
            查询数据
            </summary>
            <typeparam name="T">返回实体class</typeparam>
            <param name="db">IDatabase</param>
            <param name="sql">sql 语句，参数用@前缀，自动识别数据库类型</param>
            <param name="obj">参数：class or Dictionary&lt;string, object&gt;，class属性 or key必须与参数名称一致</param>
            <returns>实体 list</returns>
        </member>
        <member name="M:Afx.Data.DatabaseExtension.ExecuteScalar``1(Afx.Data.IDatabase,System.String,System.Object)">
            <summary>
            执行并返回查询结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="db">IDatabase</param>
            <param name="sql">sql 语句，参数用@前缀，自动识别数据库类型</param>
            <param name="obj">参数：class or Dictionary&lt;string, object&gt;，class属性 or key必须与参数名称一致</param>
            <returns>数据</returns>
        </member>
        <member name="M:Afx.Data.DatabaseExtension.ExecuteNonQuery(Afx.Data.IDatabase,System.String,System.Object)">
            <summary>
            对连接对象执行 SQL 语句。
            </summary>
            <param name="db">IDatabase</param>
            <param name="sql">sql 语句，参数用@前缀，自动识别数据库类型</param>
            <param name="obj">参数：class or Dictionary&lt;string, object&gt;，class属性 or key必须与参数名称一致</param>
            <returns>受影响的行数。</returns>
        </member>
        <member name="T:Afx.Data.Extensions.IModelToParam">
            <summary>
            sql 参数 class 转换接口
            </summary>
        </member>
        <member name="M:Afx.Data.Extensions.IModelToParam.To(Afx.Data.IDatabase,System.String,System.Object)">
            <summary>
            sql 参数 class 转换
            </summary>
            <param name="db">IDatabase</param>
            <param name="sql">sql</param>
            <param name="obj">sql 参数</param>
            <returns></returns>
        </member>
        <member name="T:Afx.Data.Extensions.IReaderToModel">
            <summary>
            IDataReader 读取结果转换成实体
            </summary>
        </member>
        <member name="M:Afx.Data.Extensions.IReaderToModel.To(System.Data.IDataReader)">
            <summary>
            转换实体
            </summary>
            <param name="reader">IDataReader</param>
            <returns></returns>
        </member>
        <member name="T:Afx.Data.Extensions.ModelToParam">
            <summary>
            sql 参数class 转换sqlParameter接口
            </summary>
        </member>
        <member name="M:Afx.Data.Extensions.ModelToParam.To(Afx.Data.IDatabase,System.String,System.Object)">
            <summary>
            obj转换sqlParameter
            </summary>
            <param name="db">IDatabase</param>
            <param name="sql">sql</param>
            <param name="obj">obj</param>
            <returns></returns>
        </member>
        <member name="T:Afx.Data.Extensions.ReaderToModel">
            <summary>
            IDataReader 读取结果转换成实体
            </summary>
        </member>
        <member name="M:Afx.Data.Extensions.ReaderToModel.To(System.Data.IDataReader)">
            <summary>
            转换实体
            </summary>
            <param name="reader">IDataReader</param>
            <returns></returns>
        </member>
        <member name="M:Afx.Data.Extensions.ReaderToModel.GetOrdinal(System.Data.IDataReader,System.String)">
            <summary>
            获取列所在位置
            </summary>
            <param name="reader">IDataReader</param>
            <param name="name"></param>
            <returns>未找到返回-1</returns>
        </member>
        <member name="M:Afx.Data.Extensions.ReaderToModel.GetBytes(System.Data.IDataReader,System.Int32)">
            <summary>
            读取byte[]
            </summary>
            <param name="reader"></param>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Afx.Data.Extensions.ReaderToModel.GetChars(System.Data.IDataReader,System.Int32)">
            <summary>
            读取char[]
            </summary>
            <param name="reader"></param>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
    </members>
</doc>
